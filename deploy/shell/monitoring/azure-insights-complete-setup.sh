#!/bin/bash

# üìä Azure Insights Complete Setup Script
# Sets up the complete monitoring stack: Azure Monitor + Prometheus + Grafana + Alerts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# Change to project root directory
cd "$(dirname "$0")/../../.."

log "üöÄ Starting Azure Insights Complete Setup..."
echo ""

# ========================================
# STEP 1: Setup Azure Monitor Integration
# ========================================
log "üìä STEP 1: Setting up Azure Monitor integration..."
echo ""

log_info "Deploying Azure Application Insights configuration..."
kubectl apply -f ./deploy/chart/app/namespace.yaml
if kubectl apply -k ./deploy/chart/insights/azure-monitor-setup/; then
    log_success "Azure Monitor integration configured"
else
    log_error "Failed to configure Azure Monitor integration"
    exit 1
fi

# Wait for ConfigMaps to be available
log "‚è≥ Waiting for Azure Monitor configuration to be ready..."
kubectl wait --for=condition=Ready configmap/app-insights-config -n banv-projects --timeout=60s || true
log_success "Azure Monitor configuration ready"

# Create the app-insights-secret with actual connection string
log "üîë Creating Azure Application Insights secret..."
CONNECTION_STRING=$(az monitor app-insights component show \
    --app mindx-banv-app-insights \
    --resource-group mindx-individual-banv-rg \
    --query connectionString -o tsv 2>/dev/null)

if [ -n "$CONNECTION_STRING" ]; then
    # Delete existing secret if it exists
    kubectl delete secret app-insights-secret -n banv-projects 2>/dev/null || true
    
    # Create new secret with connection string
    kubectl create secret generic app-insights-secret \
        --from-literal=connection-string="$CONNECTION_STRING" \
        -n banv-projects
    
    log_success "Azure Application Insights secret created"
    
    # Restart application pods to pick up the new secret
    log "üîÑ Restarting application pods to use new secret..."
    kubectl delete pods -n banv-projects -l app=backend 2>/dev/null || true
    kubectl delete pods -n banv-projects -l app=frontend 2>/dev/null || true
    log_success "Application pods restarted"
else
    log_warning "Could not retrieve Application Insights connection string"
    log_warning "You may need to create the secret manually:"
    log_warning "  kubectl create secret generic app-insights-secret --from-literal=connection-string=\"YOUR_CONNECTION_STRING\" -n banv-projects"
fi

echo ""

# ========================================
# STEP 2: Setup Prometheus Stack
# ========================================
log "üìà STEP 2: Setting up Prometheus monitoring stack..."
echo ""

# Add Helm repositories
log "üì¶ Adding Helm repositories..."
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts 2>/dev/null || true
helm repo add grafana https://grafana.github.io/helm-charts 2>/dev/null || true
helm repo update
log_success "Helm repositories updated"

# Create namespaces
log "üèóÔ∏è  Creating monitoring namespaces..."
kubectl create namespace prometheus-system --dry-run=client -o yaml | kubectl apply -f -
kubectl create namespace grafana-system --dry-run=client -o yaml | kubectl apply -f -
log_success "Monitoring namespaces ready"

# Deploy Prometheus Kubernetes resources first
log "üìä Deploying Prometheus Kubernetes resources..."
if kubectl apply -k ./deploy/chart/insights/prometheus-setup/; then
    log_success "Prometheus Kubernetes resources deployed"
else
    log_warning "Some Prometheus Kubernetes resources may have failed, continuing..."
fi

# Install Prometheus with Helm
log "üî• Installing Prometheus stack with Helm..."
if helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
    --namespace prometheus-system \
    --values ./deploy/chart/insights/prometheus-setup/prometheus-values.yaml \
    --wait --timeout=300s; then
    log_success "Prometheus stack installed successfully"
else
    log_warning "Prometheus installation had issues, but continuing..."
fi

# Install Grafana with Helm
log "üìä Installing Grafana with Helm..."
if helm upgrade --install grafana grafana/grafana \
    --namespace grafana-system \
    --values ./deploy/chart/insights/prometheus-setup/grafana-values.yaml \
    --wait --timeout=300s; then
    log_success "Grafana installed successfully"
else
    log_warning "Grafana installation had issues, but continuing..."
fi

echo ""

# ========================================
# STEP 3: Verify ServiceMonitors
# ========================================
log "üîç STEP 3: Verifying ServiceMonitors..."
echo ""

# Wait a moment for ServiceMonitors to be processed
sleep 10

# Check ServiceMonitors
SERVICEMONITORS=$(kubectl get servicemonitors.monitoring.coreos.com -n prometheus-system --no-headers 2>/dev/null | wc -l)
if [ "$SERVICEMONITORS" -gt 0 ]; then
    log_success "ServiceMonitors deployed: $SERVICEMONITORS"
    kubectl get servicemonitors.monitoring.coreos.com -n prometheus-system 2>/dev/null || true
else
    log_warning "No ServiceMonitors found, but continuing..."
fi

echo ""

# ========================================
# STEP 4: Display Access Information
# ========================================
log "üîó STEP 4: Monitoring stack access information..."
echo ""

# Check running components
PROMETHEUS_PODS=$(kubectl get pods -n prometheus-system -l app.kubernetes.io/name=prometheus --no-headers 2>/dev/null | grep Running | wc -l)
GRAFANA_PODS=$(kubectl get pods -n grafana-system -l app.kubernetes.io/name=grafana --no-headers 2>/dev/null | grep Running | wc -l)
ALERTMANAGER_PODS=$(kubectl get pods -n prometheus-system -l app.kubernetes.io/name=alertmanager --no-headers 2>/dev/null | grep Running | wc -l)

log_info "üìã MONITORING COMPONENTS STATUS:"
echo ""

if [ "$PROMETHEUS_PODS" -gt 0 ]; then
    log_success "Prometheus: $PROMETHEUS_PODS pods running"
    echo "  Access: kubectl port-forward -n prometheus-system svc/prometheus-kube-prometheus-prometheus 9091:9090"
    echo "  URL: http://localhost:9091"
else
    log_warning "Prometheus: Not running (may need more cluster resources)"
fi

if [ "$GRAFANA_PODS" -gt 0 ]; then
    log_success "Grafana: $GRAFANA_PODS pods running"
    echo "  Access: kubectl port-forward -n grafana-system svc/grafana 3000:80"
    echo "  URL: http://localhost:3000"
    echo "  Username: admin"
    echo "  Password: \$(kubectl get secret -n grafana-system grafana -o jsonpath='{.data.admin-password}' | base64 -d)"
else
    log_warning "Grafana: Not running"
fi

if [ "$ALERTMANAGER_PODS" -gt 0 ]; then
    log_success "AlertManager: $ALERTMANAGER_PODS pods running"
    echo "  Access: kubectl port-forward -n prometheus-system svc/alertmanager-operated 9093:9093"
    echo "  URL: http://localhost:9093"
else
    log_warning "AlertManager: Not running"
fi

echo ""
log_info "‚òÅÔ∏è  Azure Application Insights:"
echo "  Portal: https://portal.azure.com/#@mindx.com.vn/resource/subscriptions/f244cdf7-5150-4b10-b3f2-d4bff23c5f45/resourceGroups/mindx-individual-banv-rg/providers/microsoft.insights/components/mindx-banv-app-insights"

echo ""

# ========================================
# FINAL STATUS
# ========================================
TOTAL_COMPONENTS=4
WORKING_COMPONENTS=0

[ "$PROMETHEUS_PODS" -gt 0 ] && ((WORKING_COMPONENTS++))
[ "$GRAFANA_PODS" -gt 0 ] && ((WORKING_COMPONENTS++))
[ "$ALERTMANAGER_PODS" -gt 0 ] && ((WORKING_COMPONENTS++))
((WORKING_COMPONENTS++)) # Azure Application Insights always configured

HEALTH_PERCENTAGE=$((WORKING_COMPONENTS * 100 / TOTAL_COMPONENTS))

echo ""
if [ "$HEALTH_PERCENTAGE" -ge 75 ]; then
    log_success "‚úÖ Azure Insights monitoring setup completed successfully!"
    log_success "üìä System is $HEALTH_PERCENTAGE% operational"
else
    log_warning "‚ö†Ô∏è Azure Insights monitoring setup completed with issues"
    log_warning "üìä System is $HEALTH_PERCENTAGE% operational"
fi

echo ""
log_info "üéØ DEPLOYED CAPABILITIES:"
echo ""
echo "‚úÖ Azure Application Insights integration"
echo "‚úÖ Prometheus metrics collection"
echo "‚úÖ Grafana dashboard visualization"
echo "‚úÖ AlertManager notification system"
echo "‚úÖ ServiceMonitors for application metrics"
echo "‚úÖ Infrastructure and application monitoring"
echo ""

if [ "$PROMETHEUS_PODS" -eq 0 ]; then
    log_warning "üí° NOTE: If Prometheus is not running due to resource constraints:"
    echo "  - Scale your AKS cluster: az aks scale --resource-group mindx-individual-banv-rg --name mindx_aks_banv --node-count 3"
    echo "  - Azure Application Insights is still fully functional for monitoring"
    echo ""
fi

log_success "üöÄ Azure Insights Complete Setup Finished!"
echo "" 